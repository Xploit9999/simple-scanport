#!/usr/bin/env bash

#--------colores--------------------
y="\e[1;33m"
lg="\e[92m"
r="\e[31m"
c="\e[36m"
g="\e[37m"
x="\e[0m"
#----------------------------------

function help_panel(){

    printf "%100s\n" " " | tr " " "-"
    cat <<-!
        TCP & UDP
    
        Usage options [ -s -p -r -P ]

        -s = Enter the server(s), if they are a group, put them inside quotes, e.g., "srv1 srv2"
        -p = Enter the port(s), if it's a group, put them inside quotes, e.g., "80 22 23"
        -r = Port range, enter the range of ports in this format, e.g., 80-120
        -P = specify protocol to use (tcp, udp)

        EX:

        single host and single port:

        scanport -s 192.168.1.4 -p 22 -P tcp

        Multiple hosts and multiple ports:

        scanport -s "192.168.1.4 192.168.1.6" -p "53 21" -P udp

        Range ports on a host:

        scanport -s 192.168.1.4 -r 20-40

!
    printf "%100s\n" " " | tr " " "-"

}

function break_key(){

    printf "\n${lg}[x] Bye! <3${x} \n"
    tput cnorm; exit 0
}

function ports(){
       
        read -d "" -ra hosts <<< ${1}
        read -d "" -ra ports <<< ${2}

        [[ $protocol == 'tcp' ]] && { \
            for serv in ${hosts[@]}; {
                for port in ${ports[@]}; {
                
                    read -r connection < <(timeout 5 bash -c "</dev/${protocol}/${serv}/${port}" 2>/dev/null; echo $?)

                     [[ $connection -eq 0 ]] && { 
                         printf "\n\n${lg}[+]${x} ${g}Open port${x} ${y}[$port]${x} ${g}on:${x}${c}${serv}${x} \n\n" ;} \
                     || { printf "\n\n${r}[-]${x} ${g}Close port${x} ${y}[$port]${x} ${g}on:${x} ${c}$serv${x} \n\n" ;}
                 }
            }
        } || { \
            for serv in ${hosts[@]}; {
                for port in ${ports[@]}; {
                
                    read -r connection < <(timeout 5 bash -c "</dev/${protocol}/${serv}/${port}" 2>/dev/null; echo $?)

                     [[ $connection -eq 0 ]] && { 
                         printf "\n\n${lg}[+]${x} ${g}Open port${x} ${y}[$port]${x} ${g}on:${x}${c}${serv}${x} \n\n" ;} \
                     || { printf "\n\n${r}[-]${x} ${g}Close port${x} ${y}[$port]${x} ${g}on:${x} ${c}$serv${x} \n\n" ;}
                 }
            }
        }
}

function rangs(){

        read -d "" -ra hosts <<< ${1}
        read -d "" -ra ports <<< ${2//-/$'\n'}
        [[ $protocol == 'tcp' ]] && { \
            for serv in ${hosts[@]}; {
                for (( port=${ports[0]}; port<=${ports[1]}; port++ )); {

                    read -r connection < <(timeout 5 bash -c "</dev/${protocol}/${serv}/${port}" 2>/dev/null; echo $?)
                    
                    [[ $connection -eq 0 ]] && {
                        printf "\n\n${lg}[+]${x} ${g}Open port${x} ${y}[$port]${x} ${g}on:${x} ${c}$serv${x} \n\n" ;} \
                    || { printf \n\n"${r}[-]${x} ${g}Close port${x} ${y}[$port]${x} ${g}on:${x} ${c}$serv${x} \n\n" ;}
                }
            }
        } || { \
             for serv in ${hosts[@]}; {
                for (( port=${ports[0]}; port<=${ports[1]}; port++ )); {

                    read -r connection < <(timeout 5 bash -c "</dev/${protocol}/${serv}/${port}" 2>/dev/null; echo $?)
                    
                    [[ $connection -eq 0 ]] && {
                        printf "\n\n${lg}[+]${x} ${g}Open port${x} ${y}[$port]${x} ${g}on:${x} ${c}$serv${x} \n\n" ;} \
                    || { printf \n\n"${r}[-]${x} ${g}Close port${x} ${y}[$port]${x} ${g}on:${x} ${c}$serv${x} \n\n" ;}
                }
            }
        }
}
function check_port(){

    tput civis

    [[ ! -z $port ]] && { ports "${target_server[*]}" "${port[*]}" ; } \
    || { rangs  "${target_server[*]}" "${port_range}" ; }

}

function __main__(){

    declare -i count=0
    local OPTIND
    while getopts ":s:p:r:P:h:" args; do
        case $args in
        s) declare -a target_server=(${OPTARG}); let count+=1 ;;
        p) declare -a port=(${OPTARG}); let count+=1 ;;
        r) port_range=$OPTARG; let count+=1 ;;
        P) protocol=$OPTARG; let count+=1 ;;
        h) help_panel=$OPTARG ;;
        esac
    done

    [[ $count -ne 3 ]] && { printf "${y}"; help_panel; printf "${x}" ;} \
    || { trap break_key SIGINT;check_port;tput cnorm ;}

}    

__main__ "$@"
